#!/usr/bin/env ruby

require 'pathname'
require 'yaml'

def load_gem_lib(lib_name)
  begin
    require lib_name
  rescue LoadError
    puts "You do not have the `#{lib_name}` gem installed"
    puts ""
    puts "Install with: gem install #{lib_name}"
    puts ""
    puts "You may be required to use sudo to install"
    exit(1)
  end
end

load_gem_lib('aws-sdk')

def load_config(path)
  YAML.load(File.read('config/secrets.yml'))
end

def configure_s3(config)
  Aws.config.update({
    region: config['s3_region'],
    credentials: Aws::Credentials.new(config['s3_key'], config['s3_secret'])
  })
end

def load_file_names(dir)
  dir.entries.select{|path| path.to_s[/^\d+$/] }.map{|path| dir.join(path, "#{path}.mp3")}
end

def sync_files(paths, config)
  paths.each do |path|
    sync_file(path, config)
  end
end

def sync_file(path, config)
# Check to see if it's file is already on s3
#   If not, check if it is in the episode directory
#     If not, complain about it
# Check to see if the file is already on the server
#  If not, sync it to the server (download from s3?)

  if !file_on_s3?(path.basename, config)
    if file_local?(path)
      copy_local_to_s3(path, config)
    else
      puts "WARN: #{path} missing"
      return
    end
  end

  if !file_on_server?(path.basename, config)
    copy_s3_to_server(path.basename, config)
  end

  puts "#{path} synced"
end

def file_local?(path)
  path.exist?
end

def file_on_s3?(filename, config)
  s3 = Aws::S3::Client.new
  begin
    s3.head_object(bucket: config['s3_bucket'], key: filename.to_s)
    true
  rescue Aws::S3::Errors::NotFound
    false
  end
end

# Copies file from local path to s3.
def copy_local_to_s3(path, config)
  puts "Copying #{path.basename} to S3..."

  s3 = Aws::S3::Client.new
  s3.put_object(bucket: config['s3_bucket'], key: path.basename.to_s, body: path.open)
end

def file_on_server?(filename, config)
  remote_path = "#{config['remote_directory']}/audio/#{filename}"
  output      = `ssh #{config['server']} "ls #{remote_path} 2>/dev/null"`

  !!output[/#{remote_path}/]
end

# Copies file from s3 to server by generating a signed URL for the file and
# downloading it via cURL on the server.
def copy_s3_to_server(filename, config)
  puts "Copying #{filename} from S3 to server..."

  s3     = Aws::S3::Client.new
  signer = Aws::S3::Presigner.new(client: s3)
  url = signer.presigned_url(:get_object,
    { expires_in: 3600,
      bucket:     config['s3_bucket'],
      key:        filename.to_s,
      secure:     true
    }
  )

  remote_path = "#{config['remote_directory']}/audio/#{filename}"
  `ssh #{config['server']} "curl '#{url}' > remote_path"`
end

config = load_config('config/secrets.yml')
configure_s3(config)
episode_parent_dir = Pathname.new('episodes')
audio_file_paths = load_file_names(episode_parent_dir)

sync_files(audio_file_paths, config)
