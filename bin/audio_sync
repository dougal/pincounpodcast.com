#!/usr/bin/env ruby

require 'pathname'
require 'yaml'
require 'aws-sdk-s3'

def load_config(path)
  YAML.load(File.read('config/secrets.yml'))
end

def configure_s3(config)
  Aws.config.update({
    region: config['s3_region'],
    credentials: Aws::Credentials.new(config['s3_key'], config['s3_secret'])
  })
end

def sync_files
  config = load_config('config/secrets.yml')
  configure_s3(config)

  server_files = server_file_md5s(config)
  s3_files     = s3_file_etags(config)

  Dir.new('episodes').entries.each do |episode_number|
    next unless episode_number[/^\d+$/]

    filename = "pincount-podcast-#{episode_number}.mp3"

    sync_file(filename,
              server_files[filename],
              s3_files[filename],
              config)
  end
end

def sync_file(filename, server_md5, s3_etag, config)
  unless s3_etag
    puts "ERROR: #{filename} missing is from S3."
    exit(1)
  end

  if server_md5 != s3_etag
    copy_s3_to_server(filename, config)
  end

  puts "#{filename} synced"
end

# Copies file from s3 to server by generating a signed URL for the file and
# downloading it via cURL on the server.
def copy_s3_to_server(filename, config)
  puts "Copying #{filename} from S3 to server..."

  s3     = Aws::S3::Client.new
  signer = Aws::S3::Presigner.new(client: s3)
  url = signer.presigned_url(:get_object,
    { expires_in: 3600,
      bucket:     config['s3_bucket'],
      key:        filename,
      secure:     true
    }
  )

  remote_directory = "#{config['remote_directory']}/audio"
  remote_path = "#{remote_directory}/#{filename}"
  `ssh #{config['server']} "mkdir -p #{remote_directory} && curl '#{url}' > #{remote_path}"`
end

def server_file_md5s(config)
  remote_path = "#{config['remote_directory']}/audio/*.mp3"
  output      = `ssh #{config['server']} "md5sum #{remote_path} 2>/dev/null"`

  server_files = {}
  md5          = nil
  path         = nil

  # 29cdb488c2dcbdf17d8e2f4aa5a18582  /var/www/pincountpodcast/audio/pincount-podcast-1.mp3
  output.each_line do |line|
    md5, path              = line.split(' ')
    filename               = File.basename(path)
    server_files[filename] = md5
  end

  server_files
end

def s3_file_etags(config)
  s3 = Aws::S3::Client.new

  response = s3.list_objects(bucket: config['s3_bucket'])

  s3_files = {}
  etag     = nil
  path     = nil

  response.contents.each do |object|
    # Remove leading and trailing quotes.
    s3_files[object.key] = object.etag[1,32]
  end

  s3_files
end

sync_files
